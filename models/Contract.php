<?php


namespace app\models;


use yii\db\ActiveRecord;
use yii\helpers\Html;

class Contract extends ActiveRecord
{
    //public static $userContracts;

    public static function tableName()
    {
        return 'contracts'; // TODO: Change the autogenerated stub
    }


    public static function updateAllContract($user, $result)
    {

        $userContracts = [];
        if (!empty($result['FullName'])) {
            $userContracts[] = self::updateOneContract($result, $user->id);

        } else {
            foreach ($result as $contract) {
                $userContracts[] = self::updateOneContract($contract, $user->id);
            }
        }
        if ($removeContracts = static::find()->select(['id'])->where(['user_id' => $user->id])->andWhere(['not in', 'id', $userContracts])->asArray()->all()) {
            static::deleteAll(['in', 'id', $removeContracts]);
        }
        return true;

    }

    public static function updateOneContract($dataContract, $userId)
    {
        if (!empty($contract = self::findOne(['uid' => $dataContract['UID']]))) {

        } else {
            $contract = new Contract();
            $contract->user_id = $userId;
            $contract->uid = $dataContract['UID'];
        }
        $contract->date = $dataContract['Date'];
        $contract->full_name = $dataContract['FullName'];
        $contract->category = $dataContract['Category'];
        $contract->number = $dataContract['Number'];
        if ($contract->save()) {
            return $contract->id;
        }
    }

    public static function removeAllUserContract($userId)
    {
        return self::deleteAll(['user_id' => $userId]);
    }

    public static function getListContracts($userId)
    {
        if (!empty($contracts = static::find()->where(['user_id'=>$userId])->asArray()->all())) {
            $links = [];
            foreach ($contracts as $contract) {
                $links []= Html::a($contract['full_name'], ['main/downloadedo', 'uid' => $contract['uid']],['target'=>'_blank']);

            }
            return Html::ul($links,['encode'=>false]);
        }
    }

    public function getUser()
    {
        $this->hasOne(User::class, ['id' => 'user_id']);
    }
}
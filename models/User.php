<?php

namespace app\models;

use linslin\yii2\curl\Curl;
use yii\db\ActiveRecord;
use yii\httpclient\Client;
use yii\httpclient\XmlParser;
use Yii;

class User extends ActiveRecord implements \yii\web\IdentityInterface
{
//    public $id;
//    public $username;
//    public $password;
//    public $authKey;
//    public $accessToken;
//
//    private static $users = [
//        '100' => [
//            'id' => '100',
//            'username' => 'admin',
//            'password' => 'admin',
//            'authKey' => 'test100key',
//            'accessToken' => '100-token',
//        ],
//        '101' => [
//            'id' => '101',
//            'username' => 'demo',
//            'password' => 'demo',
//            'authKey' => 'test101key',
//            'accessToken' => '101-token',
//        ],
//    ];

    public static function tableName()
    {
        return 'users'; // TODO: Change the autogenerated stub
    }

    public function setPassword($password)
    {
        $this->temp = \Yii::$app->security->generatePasswordHash($password);
    }

    public function setIdDb()
    {
        $newIdDb = base64_encode($this->username);
        if ($newIdDb == $this->id_db) {
            $uNameArr = explode('-', base64_decode($this->id_db));
            if (isset($uNameArr[1])) {
                $newIdDb = base64_encode($uNameArr[1] . '-' . $uNameArr[0]);
            } else {
                $newIdDb = base64_encode($uNameArr[0] . '-' . $this->id);
            }

        }
        $this->id_db = $newIdDb;
    }

    public function generateAuthKey()
    {
        $this->auth_key = \Yii::$app->security->generateRandomString();
    }

    public function validateFromDB($method)
    {
        $data = [
            'id' => $this->id_db,
            'inn' => $this->inn,
            'contract' => $this->contract,
            'method' => $method
        ];
        if ($method == 1) {
            $data['value'] = $this->phone;
        } else {
            $data['value'] = $this->email;
        }
        if ($this->kpp) {
            $data['kpp'] = $this->kpp;
        }
        //return ['success' => 'типа провалидиравали'];
        $client = new Client();
        $response = $client->createRequest()
            ->setMethod('GET')
            ->setUrl('http://s2.rgmek.ru:9900/rgmek.ru/hs/lk/registration')
            ->setData($data)
            ->send();
        if ($response->isOk) {
            $xml = new XmlParser();
            $result = $xml->parse($response);

            if ($result['Error']) {
                return ['error' => $result['Error']['Message']];
            } else {
                return ['success' => $result['Value']];
            }
        } else {
            return ['error' => 'Не удалось связаться БД - повторите попытку пзже.'];
        }


    }

    public function setVerification($method)
    {
        Yii::$app->session->set('vCode', rand(1000, 9999));
        Yii::$app->session->set('uId', $this->id);
        Yii::$app->session->set('vMethod', $method);
    }

    public function sendVerification()
    {
        //return true; закоментировать

        $vCode = Yii::$app->session->get('vCode');
        if ( Yii::$app->session->get('vMethod') == 1) {
            //отправляем SMS
            $client = new Client();
            $phone = substr_replace($this->phone, '7', 0, 1);
            $username = '0ec34eb3a1';
            $password = 'caa4011422';
            $data = [
                'msisdn' => $phone,
                'shortcode' => 'rgmek',
                'text' => $vCode
            ];

            $response = $client->createRequest()
                ->setMethod('POST')
                ->setHeaders(['Authorization' => 'Basic ' . base64_encode("$username:$password")])
                ->setUrl('https://target.tele2.ru/api/v2/send_message')
                ->setData($data)
                ->send();

            if (!$response->isOk) {
                return ['error' => 'Не удалось отправить SMS - повторите попытку регистрации позже.'];
            } else {
                $responseArrContent = json_decode($response->content, true);
                if ($responseArrContent['status'] == 'error') {
                    return ['error' => 'Не удалось отправить SMS - повторите попытку регистрации позже.Error:' . $responseArrContent['reason']];
                }
            }
        } else {
            //отправляем почту
            $mail = Yii::$app->mailer->compose()
                ->setFrom('noreply@send.rgmek.ru')
                ->setTo($this->email)
                ->setSubject('Подтверждение почты')
                ->setTextBody('Код:' . $vCode)
                ->send();
            if (!$mail) {
                return ['error' => 'Не удалось отправить письмо - повторите попытку регистрации позже.'];
            }
        }
        return true;
    }

    public function activation()
    { //@return true or array('error'=>'error message')

        $data = ['id' => $this->id_db];
        $client = new Client();
        $response = $client->createRequest()
            ->setMethod('GET')
            ->setUrl('http://s2.rgmek.ru:9900/rgmek.ru/hs/lk/activation')
            ->setData($data)
            ->send();
        if ($response->isOk) {
            $xml = new XmlParser();
            $result = $xml->parse($response);

            if ($result['Error']) {
                return ['error' => $result['Error']['Message']];
            } else {
                $this->password = $this->temp;
                if ($this->save()) {
                    return true;
                } else {
                    return ['error' => 'Не удалось сохранить пароль!'];
                }
            }
        } else {
            return ['error' => 'Не удалось связаться БД - повторите попытку регистрации позже.'];
        }
    }

    public function remove()
    {
        $data = ['id' => $this->id_db];
        $client = new Client();
        $response = $client->createRequest()
            ->setMethod('GET')
            ->setUrl('http://s2.rgmek.ru:9900/rgmek.ru/hs/lk/delete')
            ->setData($data)
            ->send();
        if ($response->isOk) {
            $this->delete();
        }
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->id;
    }


    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->authKey;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
        return $this->authKey === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return \Yii::$app->security->validatePassword($password, $this->password);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {

    }

}
